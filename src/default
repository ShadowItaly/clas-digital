##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
proxy_cache_path  /etc/nginx/cache  levels=1:2    keys_zone=STATIC:10m
    inactive=24h  max_size=1g;
server {
	listen 1222 ssl default_server;
	listen [::]:1222 ssl default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;
	
	root /etc/clas-digital/web;

	# Add index.php to the list if you are using PHP
	index Search.html;

	ssl on;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers         "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
        ssl_certificate     /etc/clas-digital/bin/cert.pem;
        ssl_certificate_key /etc/clas-digital/bin/key.pem;
	server_name _;
	
    	location /api {
        	proxy_pass         http://127.0.0.1:9000;
	} 

	location /userlist {
        	proxy_pass         http://127.0.0.1:9000;
	}

		
	location /private/ {
        	auth_request         /authenticate;
	}

	location /login {
        	proxy_pass         http://127.0.0.1:9000;
	}	

	location /search {
        	proxy_pass         http://127.0.0.1:9000;
        	proxy_cache_key $uri$is_args$args;
		proxy_buffering        on;
            	proxy_cache            STATIC;
            	proxy_cache_valid      200  1d;
            	proxy_cache_use_stale  error timeout invalid_header updating
                                   http_500 http_502 http_503 http_504;
	}

	location /authenticate {
		internal;
        	proxy_pass         http://127.0.0.1:9000;
	}
	
	location = / {
        	proxy_pass         http://127.0.0.1:9000/search;
		proxy_redirect 	http://127.0.0.1:9000/ http://127.0.0.1:9000/search;
		proxy_cache_key $uri$is_args$args;
		proxy_buffering        on;
            	proxy_cache            STATIC;
            	proxy_cache_valid      200  1d;
            	proxy_cache_use_stale  error timeout invalid_header updating
                                   http_500 http_502 http_503 http_504;
	}

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}
	
	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
